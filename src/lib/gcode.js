// Convert polylines [[x,y], ...] to basic GRBL-compatible G-code
// Units assumed to be millimeters.
// Each polyline is drawn with pen-up travel move to the first point, then pen-down linear moves for the rest.

export function toGcode(polylines, opts = {}) {
  const {
    feed = 1800,   // drawing feed rate (mm/min)
    travel = 3000, // travel feed rate (mm/min)
    scale = 1,     // overall scale factor
    // Z mode parameters
    penUp = 5,     // Z height for pen up
    penDown = 0,   // Z height for pen down
    safeZ = 5,
    // Servo/Macro mode parameters
    penMode = 'z',     // 'z' | 'servo'
    servoUp = 'M3 S180',
    servoDown = 'M3 S0',
    delayAfterUp = 0,      // seconds
    delayAfterDown = 0,    // seconds
    startX = 0,
    startY = 0,
    originX = 0,
    originY = 0,
    includeHeader = true,
    includeFooter = true
  } = opts

  const lines = []
  if (includeHeader) {
    lines.push(`; Generated by Plotter Lab`)
    lines.push(`G21 ; mm units`)
    lines.push(`G90 ; absolute positioning`)
    lines.push(`G1 F${feed}`)
    if (penMode === 'z') {
      lines.push(`G0 Z${penUp.toFixed(3)}`)
    } else {
      lines.push(servoUp)
      if (delayAfterUp > 0) lines.push(`G4 P${Number(delayAfterUp).toFixed(3)}`)
    }
    lines.push(`G0 X${(originX + startX).toFixed(3)} Y${(originY + startY).toFixed(3)}`)
  }

  for (const poly of polylines) {
    if (!poly || poly.length < 2) continue
    const [x0, y0] = poly[0]
    lines.push(`; polyline`)
    lines.push(`G0 F${travel}`)
    lines.push(`G0 X${(originX + x0*scale).toFixed(3)} Y${(originY + y0*scale).toFixed(3)}`)
    lines.push(`G1 F${feed}`)
    if (penMode === 'z') {
      lines.push(`G1 Z${penDown.toFixed(3)}`)
      if (delayAfterDown > 0) lines.push(`G4 P${Number(delayAfterDown).toFixed(3)}`)
    } else {
      lines.push(servoDown)
      if (delayAfterDown > 0) lines.push(`G4 P${Number(delayAfterDown).toFixed(3)}`)
    }
    for (let i = 1; i < poly.length; i++) {
      const [x, y] = poly[i]
      lines.push(`G1 X${(originX + x*scale).toFixed(3)} Y${(originY + y*scale).toFixed(3)}`)
    }
    if (penMode === 'z') {
      lines.push(`G0 Z${safeZ.toFixed(3)}`)
    } else {
      lines.push(servoUp)
      if (delayAfterUp > 0) lines.push(`G4 P${Number(delayAfterUp).toFixed(3)}`)
    }
  }

  if (includeFooter) {
    lines.push(`G0 X${(originX + startX).toFixed(3)} Y${(originY + startY).toFixed(3)}`)
    if (penMode === 'z') {
      lines.push(`G0 Z${penUp.toFixed(3)}`)
    } else {
      lines.push(servoUp)
      if (delayAfterUp > 0) lines.push(`G4 P${Number(delayAfterUp).toFixed(3)}`)
    }
    lines.push(`M2`)
  }
  return lines.join('\n') + '\n'
}
